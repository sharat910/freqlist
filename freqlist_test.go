package freqlist

import (
	"github.com/stretchr/testify/assert"

	"testing"
)

func TestFreqList(t *testing.T) {
	list := New(3)
	assert.Equal(t, 3, list.maxSize)
	assert.Equal(t, 0, list.curSize)
	assert.Nil(t, list.head)
	assert.Nil(t, list.tail)
	c, dnk := list.NewNode("C")
	assert.Equal(t, 1, list.curSize)
	assert.Equal(t, c, list.head)
	assert.Equal(t, c, list.tail)
	assert.Nil(t, c.prev)
	assert.Nil(t, c.next)
	assert.Nil(t, dnk)
	b, dnk := list.NewNode("B")
	assert.Equal(t, 2, list.curSize)
	assert.Equal(t, b, list.head)
	assert.Equal(t, c, list.tail)
	assert.Nil(t, b.next)
	assert.Nil(t, c.prev)
	assert.Nil(t, dnk)
	assert.Equal(t, c, b.prev)
	assert.Equal(t, b, c.next)
	a, dnk := list.NewNode("A")
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, a, list.head)
	assert.Equal(t, c, list.tail)
	assert.Nil(t, a.next)
	assert.Nil(t, dnk)
	assert.Equal(t, b, a.prev)
	assert.Equal(t, a, b.next)
	assert.Equal(t, c, b.prev)
	assert.Equal(t, b, c.next)
	assert.Nil(t, c.prev)
	list.AccessNode(b)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 0, a.freq)
	assert.Equal(t, 0, c.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, b, list.head)
	assert.Equal(t, c, list.tail)
	assert.Equal(t, a, b.prev)
	assert.Equal(t, b, a.next)
	assert.Equal(t, c, a.prev)
	assert.Equal(t, a, c.next)
	assert.Nil(t, c.prev)
	assert.Nil(t, b.next)

	d, dnk := list.NewNode("D")
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, b, list.head)
	assert.Equal(t, a, list.tail)
	assert.Equal(t, dnk, "C")
	assert.Equal(t, d, b.prev)
	assert.Equal(t, b, d.next)
	assert.Equal(t, a, d.prev)
	assert.Equal(t, d, a.next)
	assert.Nil(t, a.prev)
	assert.Nil(t, b.next)

	list.AccessNode(d)
	assert.Equal(t, 1, d.freq)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 0, a.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, d, list.head)
	assert.Equal(t, a, list.tail)
	assert.Equal(t, b, d.prev)
	assert.Equal(t, d, b.next)
	assert.Equal(t, a, b.prev)
	assert.Equal(t, b, a.next)
	assert.Nil(t, a.prev)
	assert.Nil(t, d.next)

	list.AccessNode(d)
	assert.Equal(t, 2, d.freq)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 0, a.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, d, list.head)
	assert.Equal(t, a, list.tail)
	assert.Equal(t, b, d.prev)
	assert.Equal(t, d, b.next)
	assert.Equal(t, a, b.prev)
	assert.Equal(t, b, a.next)
	assert.Nil(t, a.prev)
	assert.Nil(t, d.next)

	list.AccessNode(a)
	assert.Equal(t, 2, d.freq)
	assert.Equal(t, 1, a.freq)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, d, list.head)
	assert.Equal(t, b, list.tail)
	assert.Equal(t, a, d.prev)
	assert.Equal(t, d, a.next)
	assert.Equal(t, b, a.prev)
	assert.Equal(t, a, b.next)
	assert.Nil(t, b.prev)
	assert.Nil(t, d.next)

	list.AccessNode(a)
	assert.Equal(t, 2, a.freq)
	assert.Equal(t, 2, d.freq)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, a, list.head)
	assert.Equal(t, b, list.tail)
	assert.Equal(t, d, a.prev)
	assert.Equal(t, a, d.next)
	assert.Equal(t, b, d.prev)
	assert.Equal(t, d, b.next)
	assert.Nil(t, b.prev)
	assert.Nil(t, a.next)

	list.AccessNode(a)
	assert.Equal(t, 3, a.freq)
	assert.Equal(t, 2, d.freq)
	assert.Equal(t, 1, b.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, a, list.head)
	assert.Equal(t, b, list.tail)
	assert.Equal(t, d, a.prev)
	assert.Equal(t, a, d.next)
	assert.Equal(t, b, d.prev)
	assert.Equal(t, d, b.next)
	assert.Nil(t, b.prev)
	assert.Nil(t, a.next)

	e, dnk := list.NewNode("E")
	assert.Equal(t, 3, a.freq)
	assert.Equal(t, 2, d.freq)
	assert.Equal(t, 0, e.freq)
	assert.Equal(t, 3, list.curSize)
	assert.Equal(t, a, list.head)
	assert.Equal(t, e, list.tail)
	assert.Equal(t, dnk, "B")
	assert.Equal(t, d, a.prev)
	assert.Equal(t, a, d.next)
	assert.Equal(t, e, d.prev)
	assert.Equal(t, d, e.next)
	assert.Nil(t, e.prev)
	assert.Nil(t, a.next)
}
